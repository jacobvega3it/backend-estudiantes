server:
  port: 8095

spring:
  application:
    name: gateway-server
  config:
    import: optional:file:../.env[.properties]
  cloud:
    gateway:
      default-filters:
        - AddRequestHeader=Filtro-Global, "Este-es-un-filtro-global"    
      routes:
      - id: student-service-alumnos
        uri: lb://student-service
        predicates:
        - Path=/api/estudiantes/**
        filters:
        - AuthenticationFilter
        - StripPrefix=1
        #- name: SampleCookie
        #- name: EjemploCookie
        #  args:
        #    message: Mensaje personalizado para servicio de estudiantes
        #    name: user
        #    value: admin3it
        #- EjemploCookie=mi mensaje personalizado para servicio de estudiantes version 2, usuario, user3it
      - id: student-service-carreras
        uri: lb://student-service
        predicates:
        - Path=/api/carreras/**
        filters:
        - AuthenticationFilter
        - StripPrefix=1
      - id: course-service
        uri: lb://course-service
        predicates:
        - Path=/api/cursos/**
        #- Header=token, \d+
        #- Header=token, 12345
        #- Method=GET, POST
        #- Query=color, verde
        #En Postman se debe agregar la variable de esta forma: paso=permitido; Path=/api/cursos;
        #- Cookie=paso, permitido
        filters:
        - AuthenticationFilter
        - StripPrefix=2
        #- AddRequestHeader=token-request, Entrada
        #- AddResponseHeader=token-response, Salida
        #- AddRequestParameter=name, 3it
        #- SetResponseHeader=Content-Type, text/plain
      - id: course-feign-service
        uri: lb://course-feign-service
        predicates:
        - Path=/api/cursosfeign/**
        filters:
        - AuthenticationFilter
        - StripPrefix=2
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders:
              - Authorization
              - Content-Type
              - Cache-Control
            allowCredentials: false
eureka:
  client:
    service-url:
      defaultZone: http://eureka-service:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    instance-id: ${spring.application.name}:${server.port}
    hostname: ${spring.application.name} 
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web: DEBUG
jwt:
  secret: dHVfY2xhdmVfc2VjcmV0YV9zdXBlcl9zZWd1cmFfbWluaW1vXzMyX2NhcmFjdGVyZXM=
  expiration: 86400000
  default-credentials:
    username: admin
    password: password123